from random import uniform as runif
from random import random
from deap import creator, base, tools

def rBit(): #Generate a random bit
    if random()<0.5:
        return 0
    else:
        return 1
def rInd(l): #Generate random binary individual of length l
    o = []
    for i in range(l):
        o.append(rBit())
    return o
def h_initialise(d, out): #Instance generator (writes the coefficients in a file)
    file = open(out, "a")
    file.write(str(d)+"\n")
    a = 2*d*(d-1)
    for i in range(a):
        file.write(str(runif(-1,1)) + "\n")
    file.close()
def pop_initialise(d, out, nInd = 10, nPop = 20): #Population generator (writes the individuals in a file)
    file = open(out, "a")
    for i in range(nPop):
        for j in range(nInd):
            for k in range(d**2):
                file.write(str(rBit()))
            file.write(" ")
        file.write("\n")
    file.close()
def str2arr(string):
    o = []
    for i in range(len(string)):
        o.append(int(string[i]))
    return o
def nlc(inarr): #Nested list converter (from txt generated by pop_initialise)
    inarr.pop() #Last element is a void string
    o = []
    for i in inarr:
        o.append(str2arr(i))
    return o
def getPop(input, index): #Retrieve a population relative to a certain index, stored in the file
    file = open(input, "r")
    a = file.read().split("\n")[index].split(" ")
    return list2ind(nlc(a)) #Conversion list->individual
def conf_initialise(d, out):
    file = open(out, "a")
    b = str(d)+"\n"
    file.write(b)
    for i in range(d**2+1):
        a = str(random())+"\n"
        file.write(a)
    file.close()
def list2ind(pop):
    #creator.create("FitnessMax", base.Fitness, weights=(1.0,))
    #creator.create("Individual", list, fitness=creator.FitnessMax)
    toolbox = base.Toolbox()
    toolbox.register("individual", tools.initIterate, creator.Individual)
    out = []
    for i in pop:
        out.append(toolbox.individual(lambda: i))
    return out

#h_initialise(4, "conf1.txt")
#pop_initialise(4, "pop1.txt")
